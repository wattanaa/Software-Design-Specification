import './App.css';
import { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';
import { useState, useEffect } from 'react';
import { Calendar as BigCalendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import 'react-calendar/dist/Calendar.css';
import Calendar from 'react-calendar';
import Swal from "sweetalert2";

const localizer = momentLocalizer(moment);

function Room1() {


  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î React Hook "useState" is called conditionally
  const [stadiumZone, setStadiumZone] = useState([]);
  const [totalSeats, setTotalSeats] = useState('');


  const [systems, setSystems] = useState({
    ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡πà‡∏≠‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á: { ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: false, ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°: '', ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: '', ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: '' },
    ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: { ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: false, ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°: '', ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: '', ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: '' },
    ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏†‡∏≤‡∏û5x10‡πÄ‡∏°‡∏ï‡∏£: { ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: false, ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°: '', ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: '', ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: '' },
    ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏†‡∏≤‡∏û3x3‡πÄ‡∏°‡∏ï‡∏£: { ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: false, ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°: '', ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: '', ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: '' },
    ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: { ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: false, ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°: '', ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: '', ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: '' },
    ‡∏•‡∏≤‡∏ô‡∏≠‡πÄ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: { ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: false, ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°: '', ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: '', ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: '' }
  });

  const [rooms, setRooms] = useState({
    ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤1: '', ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤2: '', ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤3: '', ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤4: '',
    ‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£: '', ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: '', ‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏áVIP: '', ‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á: '', ‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≤‡∏¢‡∏ö‡∏±‡∏ï‡∏£: ''
  });

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà useState ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
  const selectedSystems = Object.keys(systems)
    .filter(key => systems[key]?.‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô || systems[key]?.active) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    .map(key => key);


  const selectedRooms = Object.keys(rooms)
    .filter(key => rooms[key]);


  // ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
  const toggleZone = (zone) => {
    setStadiumZone(prev => prev.includes(zone) ? prev.filter(z => z !== zone) : [...prev, zone]);
  };

  const toggleSystem = (key) => {
    setSystems(prev => ({
      ...prev,
      [key]: { ...prev[key], active: !prev[key].active }
    }));
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
  const updateSystemTime = (key, field, value) => {
    setSystems(prev => {
      const updatedSystem = { ...prev[key], [field]: value };

      return { ...prev, [key]: updatedSystem };
    });
  };

  // ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    setSystems(prev => {
      const updatedSystems = { ...prev };

      Object.keys(updatedSystems).forEach(key => {
        const system = updatedSystems[key];

        if (system.‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° && system.‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î) {
          const [startHour, startMinute] = system.‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°.split(":").map(Number);
          const [endHour, endMinute] = system.‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î.split(":").map(Number);

          let totalHours = endHour - startHour;
          let totalMinutes = endMinute - startMinute;

          if (totalMinutes < 0) {
            totalHours -= 1;
            totalMinutes += 60;
          }

          updatedSystems[key].‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ = `${totalHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${totalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
        }
      });

      return updatedSystems;
    });
  }, [systems]); // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤ systems ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á


  const updateRoomTime = (room, value) => {
    setRooms(prev => ({ ...prev, [room]: value }));
  };

  const styles = {
    card: {
      backgroundColor: "#E3F2FD",
      padding: "15px",
      borderRadius: "10px",
      textAlign: "left", // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
      boxShadow: "0px 2px 5px rgba(0, 0, 0, 0.1)"
    },
    cardTitle: {
      fontWeight: "bold",
      fontSize: "16px",
      display: "block",
      marginBottom: "10px"
    },
    cardContent: {
      display: "flex",
      flexDirection: "column",
      gap: "8px",
      alignItems: "flex-start" // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ checkbox/radio ‡∏≠‡∏¢‡∏π‡πà‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
    },
    checkboxLabel: {
      display: "flex",
      alignItems: "center",
      gap: "10px",
      whiteSpace: "nowrap",
      justifyContent: "flex-start", // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ checkbox ‡∏≠‡∏¢‡∏π‡πà‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
      textAlign: "left"
    },
    radioLabel: {
      display: "flex",
      alignItems: "center",
      gap: "10px",
      whiteSpace: "nowrap",
      justifyContent: "flex-start", // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ radio ‡∏≠‡∏¢‡∏π‡πà‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
      textAlign: "left"
    }
  };


  const [eventDescription, setEventDescription] = useState("");
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [startHour, setStartHour] = useState(8);
  const [endHour, setEndHour] = useState(9);
  const [eventName, setEventName] = useState(""); // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á
  const [email, setEmail] = useState(""); // Email ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á
  const [organization, setOrganization] = useState(""); // ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£/‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  const [purpose, setPurpose] = useState(""); // ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ

  // ‚¨áÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å state ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô String ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Array ‚¨áÔ∏è
  const [stadiumZones, setStadiumZones] = useState([]); // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏™‡∏ô‡∏≤‡∏°

  // ‚¨áÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Checkbox ‚¨áÔ∏è
  const toggleStadiumZone = (zone) => {
    setStadiumZones((prev) =>
      prev.includes(zone) ? prev.filter((z) => z !== zone) : [...prev, zone]
    );
  };

  const [lighting, setLighting] = useState(false); // ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
  const [soundSystem, setSoundSystem] = useState(false); // ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  const [internet, setInternet] = useState(false); // ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï

  const [athleteRoom, setAthleteRoom] = useState(false); // ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤
  const [medicalRoom, setMedicalRoom] = useState(false); // ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
  const [vipRoom, setVipRoom] = useState(false); // ‡∏´‡πâ‡∏≠‡∏á VIP
  const [pressRoom, setPressRoom] = useState(false); // ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ñ‡∏•‡∏á‡∏Ç‡πà‡∏≤‡∏ß

  const [cleaningOption, setCleaningOption] = useState(""); // ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î


  const [additionalItems, setAdditionalItems] = useState({
    projector: 0,
    laserPointer: 0,
    microphone: 0,
  });
  const [phone, setPhone] = useState(""); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå

  const [events, setEvents] = useState([]);

  const session = useSession();
  const supabase = useSupabaseClient();
  const { isLoading } = useSessionContext();

  useEffect(() => {
    console.log("‡∏Ñ‡πà‡∏≤ systems ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ", systems);
  }, [systems]);

  console.log("‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", {
    stadiumZone,
    selectedSystems,
    selectedRooms
  });


  useEffect(() => {
    if (session) {
      getCalendarEvents().then(fetchedEvents => {
        setEvents(fetchedEvents);
      });
    }
  }, [session]);

  if (isLoading) {
    return <></>;
  }

  async function googleSignIn() {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        scopes: 'https://www.googleapis.com/auth/calendar'
      }
    });
    if (error) {
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google");
      console.log(error);
    }
  }

  async function signOut() {
    await supabase.auth.signOut();
  }

  async function getCalendarEvents() {
    const response = await fetch("https://www.googleapis.com/calendar/v3/calendars/c_4fcb3687bff68bd0cc4b8f394d9ca95edfcbfc6808249100a2ed3ee913d5fa01@group.calendar.google.com/events", {
      method: "GET",
      headers: {
        Authorization: 'Bearer ' + session.provider_token,
      },
    });

    if (!response.ok) {
      throw new Error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
    }

    const data = await response.json();
    return data.items.map(event => {
      let status = "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      const desc = event.description?.trim() || "";
      console.log("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:", desc); // ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á

      const statusMatch = desc.match(/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:\s*(‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥|‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò|‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô)/);
      if (statusMatch) {
        status = statusMatch[1];
      }

      return {
        id: event.id, // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö ID ‡∏Ç‡∏≠‡∏á event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        title: event.summary || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠", // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null title
        start: new Date(event.start.dateTime || event.start.date),
        end: new Date(event.end.dateTime || event.end.date),
        description: desc || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null description
        status, // ‚úÖ ‡πÉ‡∏™‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ event
      };
    });
  }


  const getDayEvents = (date) => {
    return events.filter(event => {
      const eventDate = moment(event.start).format('YYYY-MM-DD');
      return eventDate === moment(date).format('YYYY-MM-DD');
    });
  };

  const getCalendarStatus = (date) => {
    const dayEvents = getDayEvents(date);
    if (dayEvents.length === 0) {
      return 'green'; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    }
    const totalBookedHours = dayEvents.reduce((acc, event) => {
      const startHour = event.start.getHours();
      const endHour = event.end.getHours();
      return acc + (endHour - startHour);
    }, 0);

    if (totalBookedHours >= 11) { // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á 11 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (8:00 - 19:00)
      return 'red'; // ‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô
    }

    return 'green'; // ‡∏à‡∏≠‡∏á‡∏ö‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  };


  const formContainer = {
    display: "flex",
    flexDirection: "column",
    gap: "15px",
    backgroundColor: "#ffffff",
    padding: "25px",
    borderRadius: "12px",
    boxShadow: "0px 5px 10px rgba(0, 0, 0, 0.1)",
    maxWidth: "600px",
    margin: "auto"
  };

  const headerStyle = {
    textAlign: "center",
    color: "#007BFF",
    fontSize: "22px",
    fontWeight: "bold",
    marginBottom: "10px"
  };

  const formGroup = {
    display: "flex",
    flexDirection: "column"
  };

  const labelStyle = {
    fontWeight: "bold",
    marginBottom: "5px",
    color: "#333"
  };

  const inputStyle = {
    padding: "10px",
    borderRadius: "6px",
    border: "1px solid #ccc",
    fontSize: "16px",
    outline: "none",
    backgroundColor: "#f9f9f9",
    transition: "0.3s"
  };

  const calendarContainer = {
    display: "flex",
    justifyContent: "center",
    padding: "10px",
    backgroundColor: "#F8F9FA",
    borderRadius: "8px",
    border: "1px solid #ddd"
  };

  const timeSelectContainer = {
    display: "flex",
    justifyContent: "space-between",
    gap: "15px"
  };

  const timeSelectGroup = {
    display: "flex",
    flexDirection: "column",
    width: "48%"
  };


  const eventPropGetter = (event) => {
    let backgroundColor = "#42a5f5"; // ‡∏™‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ü‡πâ‡∏≤)

    if (event.status === "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô") {
      backgroundColor = "#FFA500"; // ‡∏™‡∏µ‡∏™‡πâ‡∏° ‚úÖ
    } else if (event.status === "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") {
      backgroundColor = "#FFFF00"; // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
    } else if (event.status === "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") {
      backgroundColor = "#00FF00"; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    } else if (event.status === "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò") {
      backgroundColor = "#FF0000"; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
    }

    return {
      style: {
        backgroundColor,
        borderRadius: '5px',
        opacity: 0.8,
        color: 'black',
        border: '0px',
        display: 'block',
      },
    };
  };


  async function createCalendarEvent() {
    //-----------------------------------//
    if (!eventName.trim()) {
      Swal.fire({
        icon: "warning",
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á",
        text: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        confirmButtonColor: "#ffc107"
      });
      return;
    }
    //

    if (!phone.trim()) {
      Swal.fire({
        icon: "warning",
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
        text: "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        confirmButtonColor: "#ffc107"
      });
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!email.trim() || !emailPattern.test(email)) {
      Swal.fire({
        icon: "warning",
        title: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô example@gmail.com",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        confirmButtonColor: "#ffc107"
      });
      return;
    }

    if (!organization.trim()) {
      Swal.fire({
        icon: "warning",
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£/‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        confirmButtonColor: "#ffc107"
      });
      return;
    }

    if (stadiumZone.length === 0) {
      console.log("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", stadiumZone); // Debug ‡∏î‡∏π‡∏Ñ‡πà‡∏≤
      Swal.fire({
        icon: "warning",
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏™‡∏ô‡∏≤‡∏°",
        text: "‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏≠‡∏á",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        confirmButtonColor: "#ffc107"
      });
      return;
    }


    if (startHour >= endHour) {
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        text: "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        confirmButtonColor: "#d33"
      });
      return;
    }




    //-----------------------------------//

    const newStart = new Date(selectedDate);
    newStart.setHours(startHour, 0, 0, 0); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡∏∞‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0

    const newEnd = new Date(selectedDate);
    newEnd.setHours(endHour, 0, 0, 0); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡∏∞‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0

    const isConflict = events.some(event => {
      return (
        (newStart >= event.start && newStart < event.end) ||
        (newEnd > event.start && newEnd <= event.end)
      );
    });

    if (isConflict) {
      Swal.fire({
        icon: "error",
        title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ",
        text: "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        confirmButtonColor: "#d33"
      });
      return;
    }

    const event = {

      summary: "‡∏à‡∏≠‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ‡∏¢‡∏¥‡∏°‡πÄ‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢‡∏°",
      description: `üìå **‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á**  
üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${eventName}  
üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${phone}  
üìß Email: ${email}  
üè¢ ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£: ${organization}  
üéØ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ${purpose}  

‚öΩ **‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô:** ${stadiumZone.length > 0 ? stadiumZone.join(", ") : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"}  

üîå **‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ:** ${selectedSystems.length > 0 ? selectedSystems.join(", ") : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"}  

üè¢ **‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:** ${selectedRooms.length > 0 ? selectedRooms.join(", ") : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"}  

üßπ **‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:** ${cleaningOption}  

‚úÖ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥**`,

      start: {
        dateTime: newStart.toISOString(), // ‡πÉ‡∏ä‡πâ ISOString ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö UTC
        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone, // ‡πÉ‡∏ä‡πâ time zone ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      },
      end: {
        dateTime: newEnd.toISOString(),
        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      }
    };

    await fetch("https://www.googleapis.com/calendar/v3/calendars/c_4fcb3687bff68bd0cc4b8f394d9ca95edfcbfc6808249100a2ed3ee913d5fa01@group.calendar.google.com/events", {
      method: "POST",
      headers: {
        Authorization: 'Bearer ' + session.provider_token,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(event),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.json();
      })
      .then((data) => {
        console.log(data);

        Swal.fire({
          icon: "success",
          title: "‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!",
          text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          confirmButtonColor: "#28a745"
        }).then(() => {
          getCalendarEvents().then(fetchedEvents => {
            setEvents(fetchedEvents);
          });

          setEventName("");
          setPhone("");
          setEmail("");
          setOrganization("");
          setPurpose("");
          setEventDescription("");
          setSelectedDate(new Date());
          setStartHour(8);
          setEndHour(9);
          setStadiumZones([]); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
          setLighting(false);
          setSoundSystem(false);
          setInternet(false);
          setAthleteRoom(false);
          setMedicalRoom(false);
          setVipRoom(false);
          setPressRoom(false);
          setCleaningOption("");
        });
      })

      .catch(error => {
        console.error("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:", error);

        Swal.fire({
          icon: "error",
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
          text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
          confirmButtonText: "‡∏õ‡∏¥‡∏î",
          confirmButtonColor: "#d33"
        });
      });
  }

  return (
    <div className="App">
      <div className="container">
        {session ? (
          <>
            <h2 style={{
              border: "3px solid #28A745", // ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
              padding: "15px 20px", // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
              borderRadius: "10px", // ‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô
              textAlign: "center", // ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
              backgroundColor: "#DFF6DD", // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
              color: "#155724", // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ò‡∏µ‡∏°
              boxShadow: "4px 4px 10px rgba(0, 0, 0, 0.1)" // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤‡∏ô‡∏∏‡πà‡∏° ‡πÜ
            }}>
              ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö, {session.user.email} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ‡∏¢‡∏¥‡∏°‡πÄ‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢‡∏°
            </h2>


            <div style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              width: "100%"
            }}>
              <h2 style={{
                border: "3px solid #007BFF",
                padding: "15px 20px",
                borderRadius: "10px",
                textAlign: "center",
                backgroundColor: "#E3F2FD",
                color: "#004085",
                boxShadow: "4px 4px 10px rgba(0, 0, 0, 0.1)"
              }}>
                ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ‡∏¢‡∏¥‡∏°‡πÄ‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢‡∏°
              </h2>

              {/* ‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á */}
              <div style={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                gap: "15px",
                marginBottom: "15px"
              }}>
                <div style={{
                  backgroundColor: "red",
                  color: "white",
                  padding: "5px 10px",
                  borderRadius: "5px",
                  fontSize: "15px",
                  textAlign: "center",
                  width: "160px"
                }}>
                  ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏õ‡∏é‡∏¥‡πÄ‡∏™‡∏ò
                </div>
                <div style={{
                  backgroundColor: "yellow",
                  color: "black",
                  padding: "5px 10px",
                  borderRadius: "5px",
                  fontSize: "15px",
                  textAlign: "center",
                  width: "160px"
                }}>
                  ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                </div>
                <div style={{
                  backgroundColor: "orange",
                  color: "white",
                  padding: "5px 10px",
                  borderRadius: "5px",
                  fontSize: "15px",
                  textAlign: "center",
                  width: "160px"
                }}>
                  ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                </div>
                <div style={{
                  backgroundColor: "green",
                  color: "white",
                  padding: "5px 10px",
                  borderRadius: "5px",
                  fontSize: "15px",
                  textAlign: "center",
                  width: "160px"
                }}>
                  ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                </div>
              </div>

              {/* ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô */}
              <BigCalendar
                localizer={localizer}
                events={events}
                startAccessor="start"
                endAccessor="end"
                style={{
                  height: "70vh",
                  minHeight: "500px",
                  width: "90%",
                  padding: "10px",
                  backgroundColor: "#fff",
                  borderRadius: "10px",
                  boxShadow: "0px 4px 8px rgba(0,0,0,0.1)"
                }}
                eventPropGetter={eventPropGetter}
                defaultView="month"
                formats={{
                  dayFormat: 'DD',
                  dayRangeHeaderFormat: ({ start, end }) =>
                    `${moment(start).format('DD/MM')} - ${moment(end).format('DD/MM')}`,
                  timeGutterFormat: (date) => moment(date).format('HH:mm'),
                }}
              />
            </div>


            <hr />
            <div style={formContainer}>
              <h3 style={headerStyle}>üìÖ ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ‡∏¢‡∏¥‡∏°‡πÄ‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢‡∏°</h3>

              <div style={formGroup}>
                <label style={labelStyle}>üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á:</label>
                <input type="text" value={eventName} onChange={e => setEventName(e.target.value)} style={inputStyle} />
              </div>

              <div style={formGroup}>
                <label style={labelStyle}>üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</label>
                <input
                  type="text"
                  value={phone}
                  onChange={e => {
                    const value = e.target.value;
                    if (/^\d*$/.test(value)) {
                      setPhone(value);
                    }
                  }}
                  placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                  style={inputStyle}
                />
              </div>

              <div style={formGroup}>
                <label style={labelStyle}>üìß Email ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á:</label>
                <input type="text" value={email} onChange={e => setEmail(e.target.value)} style={inputStyle} />
              </div>

              <div style={formGroup}>
                <label style={labelStyle}>üè¢ ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£/‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:</label>
                <input type="text" value={organization} onChange={e => setOrganization(e.target.value)} style={inputStyle} />
              </div>

              <div style={formGroup}>
                <label style={labelStyle}>üéØ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ:</label>
                <input type="text" value={purpose} onChange={e => setPurpose(e.target.value)} style={inputStyle} />
              </div>

              <div style={formGroup}>
                <label style={labelStyle}>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</label>
                <div style={calendarContainer}>
                  <Calendar onChange={setSelectedDate} value={selectedDate} />
                </div>
              </div>

              <div style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                width: "100%",
                marginTop: "10px"
              }}>
                {/* üïí ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ */}
                <div style={{
                  display: "flex",
                  justifyContent: "center",
                  gap: "20px",
                  width: "100%",
                  marginBottom: "20px"
                }}>
                  <div>
                    <label style={{ fontWeight: "bold" }}>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á:</label>
                    <select value={startHour} onChange={e => setStartHour(parseInt(e.target.value))} style={inputStyle}>
                      {[...Array(11)].map((_, index) => (
                        <option key={index} value={index + 8}>{index + 8}:00</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label style={{ fontWeight: "bold" }}>‚åõ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏≠‡∏á:</label>
                    <select value={endHour} onChange={e => setEndHour(parseInt(e.target.value))} style={inputStyle}>
                      {[...Array(11)].map((_, index) => (
                        <option key={index} value={index + 9}>{index + 9}:00</option>
                      ))}
                    </select>
                  </div>
                </div>



                <div style={{
                  display: "grid",
                  gridTemplateColumns: "1fr 1fr",
                  gap: "20px",
                  padding: "20px",
                  backgroundColor: "#F9F9F9",
                  borderRadius: "10px"
                }}>


                  {/* ‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô */}
                  <div style={styles.card}>
                    <h3>üèüÔ∏è ‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</h3>
                    <div style={styles.cardContent}>
                      <label style={styles.checkboxLabel}>
                        <input type="checkbox" checked={stadiumZone.includes("‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")} onChange={() => toggleZone("‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")} />
                        ‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
                      </label>
                    </div>
                  </div>

                  {/* ‡∏≠‡∏±‡∏í‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå */}
                  <div style={styles.card}>
                    <h3>üèüÔ∏è ‡∏≠‡∏±‡∏í‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå</h3>
                    <div style={styles.cardContent}>
                      {["‡πÇ‡∏ã‡∏ô A ‡∏ù‡∏±‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô", "‡πÇ‡∏ã‡∏ô B ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô", "‡πÇ‡∏ã‡∏ô C ‡∏ù‡∏±‡πà‡∏á‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡πÄ‡∏ß‡∏ó‡∏µ", "‡πÇ‡∏ã‡∏ô D ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏ó‡∏µ"].map(zone => (
                        <label key={zone} style={styles.checkboxLabel}>
                          <input type="checkbox" checked={stadiumZone.includes(zone)} onChange={() => toggleZone(zone)} />
                          {zone}
                        </label>
                      ))}

                    </div>
                  </div>

                  {/* ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ */}
                  <div style={styles.card}>
                    <h3>üîß ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ</h3>
                    <div style={styles.cardContent}>
                      {Object.keys(systems).map(key => (
                        <div key={key}>
                          <label style={styles.checkboxLabel}>
                            <input type="checkbox" checked={systems[key].active} onChange={() => toggleSystem(key)} />
                            {key.replace(/([A-Z])/g, ' $1')}
                          </label>
                          {systems[key].active && (
                            <div style={{ marginLeft: "20px", marginTop: "5px" }}>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* ‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° */}
                  <div style={styles.card}>
                    <h3>üè¢ ‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h3>
                    <div style={styles.cardContent}>
                      {Object.keys(rooms).map(roomKey => (
                        <div key={roomKey}>
                          <label style={styles.checkboxLabel}>
                            <input type="checkbox" checked={!!rooms[roomKey]} onChange={e => updateRoomTime(roomKey, e.target.checked ? "1" : "")} />
                            {roomKey.replace(/([A-Z])/g, ' $1')}
                          </label>
                          {rooms[roomKey] && (
                            <div style={{ marginLeft: "20px", marginTop: "5px" }}>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>

                </div>
              </div>
            </div>








            <hr />
            <div className="button-group">
              <button className="btn create-btn" onClick={createCalendarEvent}>
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
              </button>

              <button className="btn sign-out-btn" onClick={signOut}>
                ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
              </button>

              <a href="https://hoomebookingroom.web.app" className="btn back-btn">
                ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
              </a>
            </div>
          </>

        ) : (

          //--------------------------‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô-------------------------------//
          <>
            <div style={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              height: "30vh",
              backgroundColor: "white" // ‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å
            }}>
              <div style={{
                display: "flex",
                width: "780px",
                backgroundColor: "white",
                borderRadius: "12px", // ‡∏•‡∏î‡∏Ç‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏™‡∏ß‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
                overflow: "hidden" // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô
              }}>
                {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Google */}
                <div style={{
                  width: "50%",
                  padding: "40px",
                  display: "flex",
                  flexDirection: "column",
                  justifyContent: "center",
                  alignItems: "center",
                  textAlign: "center"
                }}>
                  <h2 style={{ fontSize: "24px", fontWeight: "bold", marginBottom: "20px" }}>
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ‡∏¢‡∏¥‡∏°‡πÄ‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢‡∏°
                  </h2>

                  {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google */}
                  <button
                    onClick={googleSignIn}
                    style={{
                      width: "100%",
                      backgroundColor: "#28a745",
                      color: "white",
                      padding: "12px",
                      borderRadius: "6px",
                      border: "none",
                      cursor: "pointer",
                      fontWeight: "bold",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      gap: "10px",
                      transition: "0.3s",
                      boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)"
                    }}
                    onMouseOver={(e) => e.target.style.backgroundColor = "#218838"}
                    onMouseOut={(e) => e.target.style.backgroundColor = "#28a745"}
                  >
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google
                  </button>
                </div>

                {/* ‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏•‡πÇ‡∏Å‡πâ */}
                <div style={{
                  width: "50%",
                  backgroundColor: "#6F42C1",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  padding: "20px"
                }}>
                  <img
                    src="/pig2.jpg" // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                    alt="Logo"
                    style={{
                      width: "70%",
                      height: "auto",
                      borderRadius: "50%",
                      border: "5px solid white"
                    }}
                  />
                </div>
              </div>
            </div>




          </>

        )
        }
      </div >
    </div >
  );
}

export default Room1;
